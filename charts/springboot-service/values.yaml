# Default values for springboot-service.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

# This will set the replicaset count more information can be found here: https://kubernetes.io/docs/concepts/workloads/controllers/replicaset/
replicaCount: 1

# This sets the container image more information can be found here: https://kubernetes.io/docs/concepts/containers/images/
image:
  repository: ghcr.io/scoolee/example-service
  # This sets the pull policy for images.
  pullPolicy: IfNotPresent
  # Overrides the image tag whose default is the chart appVersion.
  tag: "0.0.12"

# This is for the secretes for pulling an image from a private repository more information can be found here: https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/
imagePullSecrets: []
# This is to override the chart name.
nameOverride: ""
fullnameOverride: ""

# This section builds out the service account more information can be found here: https://kubernetes.io/docs/concepts/security/service-accounts/
serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Automatically mount a ServiceAccount's API credentials?
  automount: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

# -- Optional map of annotations to be applied to the Deployment
annotations: {}

# -- Optional labels to add to the Deployment
labels: {}

# This is for setting Kubernetes Annotations to a Pod.
# For more information checkout: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/
podAnnotations: {}
# This is for setting Kubernetes Labels to a Pod.
# For more information checkout: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/
podLabels: {}

podSecurityContext: {}
  # fsGroup: 2000

securityContext: {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000


# This is for setting up a service more information can be found here: https://kubernetes.io/docs/concepts/services-networking/service/
service:
  enabled: true
  # This sets the service type more information can be found here: https://kubernetes.io/docs/concepts/services-networking/service/#publishing-services-service-types
  type: ClusterIP
  # This sets the ports more information can be found here: https://kubernetes.io/docs/concepts/services-networking/service/#field-spec-ports
  httpPort: 80
  containerHttpPort: 8080
  httpNodePort: null
  managementPort: 9090
  containerManagementPort: 9090
  managementNodePort: null

extraEnv: []
#  - name: "ENV_VAR"
#    valueFrom:
#      secretKeyRef:
#        name: "some-secret-name"
#        key: "some-key"
#        optional: true

envFrom: []
#  - configMapRef:
#      name: ""
#      optional: true
#  - secretRef:
#      name: ""
#      optional: true

config:
  annotations: {}
  labels: {}
  log4j: |-
    Configuration:
      Appenders:
        Console:
          name: Console
          target: SYSTEM_OUT
          JsonLayout:
            compact: true
            eventEol: true
            includeTimeMillis: true

      Loggers:
        Root:
          level: INFO
          AppenderRef:
            - ref: Console
  application: |-
    management:
      server:
        port: 9090
      endpoint:
        health:
          probes:
            enabled: true
          livenessState:
            enabled: true
          readinessState:
            enabled: true

# Entrypoint array. Not executed within a shell. The docker image's ENTRYPOINT is used if this is not provided.
# The default entrypoint for jib generated docker image is `java -cp @/app/jib-classpath-file @/app/jib-main-class-file`
command: []

# Arguments to the entrypoint.
args: []

# JVM options
jvmOptions:
  - -XX:+UseContainerSupport
  - -XX:MaxRAMPercentage=80.0
  - -Djava.net.preferIPv4Stack=true
  - -Djava.awt.headless=true
  - -Dspring.config.additional-location=/etc/config/app/application.yaml

# This block is for setting up the ingress for more information can be found here: https://kubernetes.io/docs/concepts/services-networking/ingress/
ingress:
  enabled: false
  className: ""
  annotations: {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  hosts:
    - host: chart-example.local
      paths:
        - path: /
          pathType: ImplementationSpecific
  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local

resources: {}
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi

# This is to setup the liveness probe. More information can be found here: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/
livenessProbe:
  httpGet:
    path: /actuator/health/liveness
    port: "http-management"
  failureThreshold: 3
  periodSeconds: 15

# This is to setup the readiness probe. More information can be found here: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/
readinessProbe:
  httpGet:
    path: /actuator/health/readiness
    port: "http-management"
  failureThreshold: 10
  periodSeconds: 15

# This is to setup the startup probe. More information can be found here: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/
startupProbe:
  httpGet:
    path: /actuator/health/readiness
    port: "http-management"
  failureThreshold: 10
  initialDelaySeconds: 15
  periodSeconds: 15

# This section is for setting up autoscaling more information can be found here: https://kubernetes.io/docs/concepts/workloads/autoscaling/
autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 100
  targetCPUUtilizationPercentage: 80
  # targetMemoryUtilizationPercentage: 80

# Additional volumes on the output Deployment definition.
extraVolumes: {}
# - name: foo
#   secret:
#     secretName: mysecret
#     optional: false

# Additional volumeMounts on the output Deployment definition.
extraVolumeMounts: {}
# - name: foo
#   mountPath: "/etc/foo"
#   readOnly: true

nodeSelector: {}

tolerations: []

affinity: {}
